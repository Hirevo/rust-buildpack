#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment
set -o errexit    # always exit on error
set -o pipefail   # don t ignore exit codes when piping output

unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

RESET=$'\033[0m'
BOLD=$'\033[1m'
RED=$'\033[38;2;255;85;85m'
GREEN=$'\033[38;2;38;252;166m'
BLUE=$'\033[38;2;0;133;255m'

header() {
    echo "----->" $@
}

handle_error() {
    header $BOLD$RED"Build failed !"$RESET
}
trap 'handle_error' ERR

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

JQ=$BP_DIR/vendor/jq-linux64

### Install Rust toolchain
header "Installing Rust toolchain..."
curl https://sh.rustup.rs -sSf | sh -s -- -y
source $HOME/.cargo/env
rustup default nightly-2018-12-19
header "Toolchain installed !"

### Compiling application
header "Compiling application..."
cargo build --release
header $BOLD$GREEN"Build succeeded !"$RESET

### Cleaning artifacts
header "Cleaning artifacts..."
BINARY=$(cargo metadata --no-deps --format-version=1 | $JQ '.packages[0].targets|map(select(.kind[] == "bin"))[0].name')
cp $BINARY $BUILD_DIR/output
cargo clean
rm -rf $HOME/.cargo/registry $HOME/.cargo/git
mkdir $HOME/.cargo/registry $HOME/.cargo/git
rustup toolchain uninstall stable
rustup self uninstall -y
header "Artifacts cleaned !"
